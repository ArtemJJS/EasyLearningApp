create table course
(
	course_id int auto_increment
		primary key,
	course_name varchar(1000) not null,
	course_author_id int not null,
	course_description text not null,
	course_creation_date date not null,
	course_price decimal(10,2) default 0.00 not null,
	avg_mark decimal(3,2) default 0.00 null,
	course_lesson_amount int default 0 null,
	course_duration bigint default 0 null,
	state int default 2 null,
	course_picture text not null,
	update_img_path text null,
	constraint course_name_UNIQUE
		unique (course_name)
);

create table course_chapter
(
	course_chapter_id int auto_increment
		primary key,
	course_id int not null,
	chapter_name text not null,
	chapter_lesson_amount int default 0 null,
	chapter_duration bigint default 0 null,
	constraint course
		foreign key (course_id) references course (course_id)
);

create index id_course_idx
	on course_chapter (course_id);

create table course_lesson
(
	lesson_id int auto_increment
		primary key,
	course_chapter_id int not null,
	lesson_name text not null,
	lesson_content_address text null,
	lesson_creation_date date not null,
	lesson_duration bigint default 0 not null,
	constraint id_chapter
		foreign key (course_chapter_id) references course_chapter (course_chapter_id)
);

create index id_chapter_idx
	on course_lesson (course_chapter_id);

create table course_wait_approve
(
	course_id int auto_increment
		primary key,
	course_name varchar(200) not null
);

create table currency_type
(
	currensy_id int not null
		primary key,
	currency_name varchar(45) null,
	currency_country_code varchar(45) null
);

create table payment_codes
(
	payment_code int auto_increment,
	payment_description varchar(50) not null,
	constraint payment_codes_payment_code_uindex
		unique (payment_code)
);

alter table payment_codes
	add primary key (payment_code);

create table user_type
(
	user_type_id int not null,
	user_type_name varchar(45) null,
	constraint user_type_name_UNIQUE
		unique (user_type_name),
	constraint user_type_user_type_id_uindex
		unique (user_type_id)
);

alter table user_type
	add primary key (user_type_id);

create table account
(
	acc_id int auto_increment
		primary key,
	acc_login varchar(50) not null,
	acc_password varchar(50) not null,
	acc_email text not null,
	acc_name varchar(30) not null,
	acc_surname varchar(30) not null,
	acc_birthdate date not null,
	acc_phone_number varchar(20) null,
	acc_registration_date date null,
	acc_about varchar(500) null,
	new_column int null,
	acc_photo_path text null,
	acc_type int default 0 not null,
	avg_mark decimal(3,2) null,
	acc_balance decimal(12,2) default 0.00 null,
	update_photo_path text null,
	acc_pass_salt text not null,
	constraint login_UNIQUE
		unique (acc_login),
	constraint account___type
		foreign key (acc_type) references user_type (user_type_id)
			on update cascade on delete cascade
);

create index `type of user_idx`
	on account (acc_type);

create table author_mark
(
	mark_id int auto_increment
		primary key,
	target_id int not null,
	acc_id int not null,
	mark_value tinyint(1) not null,
	mark_comment text null,
	mark_date bigint not null,
	constraint `mark of author`
		foreign key (target_id) references account (acc_id)
			on update cascade on delete cascade,
	constraint `user who marked`
		foreign key (acc_id) references account (acc_id)
			on update cascade on delete cascade
);

create index id_author_idx
	on author_mark (target_id);

create index `user who marked_idx`
	on author_mark (acc_id);

create table course_mark
(
	mark_id int auto_increment
		primary key,
	target_id int not null,
	acc_id int not null,
	mark_value tinyint(2) not null,
	mark_comment text null,
	mark_date bigint not null,
	constraint course_marks
		foreign key (target_id) references course (course_id)
			on update cascade on delete cascade,
	constraint `user who marked course`
		foreign key (acc_id) references account (acc_id)
			on update cascade on delete cascade
);

create index id_course_idx
	on course_mark (target_id);

create table restore_pass_requests
(
	acc_id int not null,
	uuid varchar(100) not null,
	constraint restore_pass_requests_account_acc_id_fk
		foreign key (acc_id) references account (acc_id)
			on update cascade on delete cascade
);

create table user_payment
(
	payment_id int auto_increment
		primary key,
	acc_id int not null,
	course_id int null,
	payment_code int not null,
	payment_amount decimal(10,2) not null,
	payment_date mediumtext not null,
	currency_id int not null,
	payment_description varchar(250) null,
	constraint currency
		foreign key (currency_id) references currency_type (currensy_id)
			on update cascade on delete cascade,
	constraint payment_type_codes
		foreign key (payment_code) references payment_codes (payment_code),
	constraint `user payment`
		foreign key (acc_id) references account (acc_id)
			on update cascade on delete cascade
);

create index currency_idx
	on user_payment (currency_id);

create index id_course_idx
	on user_payment (course_id);

create index id_user_idx
	on user_payment (acc_id);

create table user_purchased_course
(
	user_id int not null,
	course_id int not null,
	constraint `course purchased`
		foreign key (course_id) references course (course_id)
			on update cascade on delete cascade,
	constraint `user buyer`
		foreign key (user_id) references account (acc_id)
			on update cascade on delete cascade
);

create index id_course_idx
	on user_purchased_course (course_id);

create index id_user_idx
	on user_purchased_course (user_id);

